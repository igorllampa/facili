package br.com.facilitecommerce.domain.model;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.validation.constraints.NotNull;

import lombok.Data;
import lombok.EqualsAndHashCode;

@Entity
@Data
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class Carrinho {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@EqualsAndHashCode.Include
	private Long id;
		
	private BigDecimal totalBruto;
	
	private BigDecimal totalDesconto;
	
	private BigDecimal totalLiquido;
	
	@ManyToOne
	@JoinColumn(name="cupom_id", nullable = true)
	private Cupom cupom;
	
	@OneToMany(mappedBy = "carrinho", cascade = CascadeType.ALL)
	@NotNull
	private List<ItemCarrinho> itens = new ArrayList<>();
	
	public void calcularValorTotal() {
		var valorTotal = BigDecimal.ZERO;
		
		for (ItemCarrinho item : this.getItens()) {
			//valorTotal.add(new BigDecimal(10.00));
			System.out.println("Total do Item: " + item.getValorTotal());
			valorTotal.add(item.getValorTotal());
			System.out.println("Parcial:" + valorTotal);
		}				
		
		System.out.println("IvalorTotal: " + valorTotal);		
		this.setTotalBruto(valorTotal);
		this.setTotalDesconto(BigDecimal.ZERO);
		this.setTotalLiquido(valorTotal);
	}
	
}
